{"version":3,"sources":["components/Profile/MyPosts/MyPosts.module.scss","components/Header/Header.module.scss","components/Profile/Profile.module.scss","components/Profile/ProfileInfo/ProfileInfo.module.scss","serviceWorker.ts","components/Header/Header.tsx","components/NavBar/NavBar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.tsx","components/Profile/MyPosts/Post/Posts.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Setting/Setting.tsx","redux/dialogs-reducer.tsx","components/Dialogs/Dialog/DialogItem.tsx","components/Dialogs/Message/MessageItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","App.tsx","redux/redux-store.tsx","index.tsx","components/NavBar/NavBar.module.scss","components/Dialogs/Dialogs.module.scss","components/Profile/MyPosts/Post/Posts.module.scss"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","src","alt","NavBar","props","nav","item","to","activeClassName","active","settings","ProfileInfo","initialState","changeTextNewPost","posts","name","time","avatar","message","like","Posts","post","postHeader","postHeaderName","postHeaderTime","postInner","postInnerText","MyPosts","postElement","map","p","myPosts","error","value","onChange","updateNewPostText","placeholder","onClick","addPost","errorMessage","MyPostsContainer","useState","setError","trim","dispatch","type","e","text","currentTarget","newText","Profile","profilePage","News","Music","Setting","textAddMessage","dialog","id","DialogItem","path","MessageItem","messageItem","Dialogs","dialogElement","dialogs","messageElement","textAddPost","React","createRef","dialogItem","addTextMessage","ref","DialogsContainer","App","render","store","dialogsPage","reducers","combineReducers","state","action","newPost","push","newMessage","createStore","rerenderEntireTree","ReactDOM","getState","bind","document","getElementById","subscribe","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.cf860210.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__3ElgO\",\"errorMessage\":\"MyPosts_errorMessage__1D8KJ\",\"error\":\"MyPosts_error__TFtll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2s73l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__3Z-zi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"ProfileInfo_ProfileInfo__3w-RO\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Profile is cached for offline use.\" message.\n              console.log('Profile is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport s from \"./Header.module.scss\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header className={s.header}><img\r\n            src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR7zCD-dHiaNWCvKp-sGnzT7cA7MJb7jo0QOw&usqp=CAU\"\r\n            alt=\"\"/>\r\n        </header>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./NavBar.module.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const NavBar = (props:any) => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}><NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink></div>\r\n            <div className={s.item}><NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink></div>\r\n            <div className={s.item}><NavLink to=\"/news\" activeClassName={s.active}>News</NavLink></div>\r\n            <div className={s.item}><NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink></div>\r\n            <div className={`${s.item} ${s.settings}`}><NavLink to=\"settings\" activeClassName={s.active}>Settings</NavLink></div>\r\n        </nav>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\";\r\n\r\n\r\ntype ProfileInfo = {\r\n\r\n}\r\n\r\nexport const ProfileInfo = (props:ProfileInfo) => {\r\n    return (\r\n        <div className={s.ProfileInfo}>\r\n            <div>\r\n                ava\r\n            </div>\r\n            <div>\r\n                description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import { PostType } from \"./types\"\r\n\r\nexport type ActionType = TextAddPostACType | AddPostACType\r\n\r\n\r\ntype InitialStateType = {\r\n    changeTextNewPost:string\r\n    posts: Array<PostType>\r\n}\r\n\r\nlet initialState = {\r\n    changeTextNewPost: \"\",\r\n    posts: [\r\n        {\r\n            name: \"Dart\",\r\n            time: \"10:23\",\r\n            avatar: \"https://html5css.ru/w3css/img_avatar3.png\",\r\n            message: \"bye\",\r\n            like: 25\r\n        }\r\n] as Array<PostType>\r\n}\r\n\r\nexport type TextAddPostACType = {\r\n    type: \"TEXT-ADD-POST\"\r\n    newText: string\r\n}\r\n\r\nexport const textAddPostAC = (newText: string): TextAddPostACType => {\r\n    return {\r\n        type: \"TEXT-ADD-POST\",\r\n        newText: newText\r\n    } as const\r\n}\r\nexport type AddPostACType = {\r\n    type: \"ADD-POST\"\r\n}\r\n\r\nexport const addPostAC = ():AddPostACType =>  ({type: \"ADD-POST\"} as const)\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            let newPost: PostType = {\r\n                name: \"Dart\",\r\n                message: state.changeTextNewPost,\r\n                time: \"11:00\",\r\n                avatar: \"https://html5css.ru/w3css/img_avatar3.png\",\r\n                like: 0\r\n            }\r\n            state.posts.push(newPost)\r\n            state.changeTextNewPost = \"\"\r\n            break;\r\n        case \"TEXT-ADD-POST\":\r\n            state.changeTextNewPost = action.newText\r\n            break;\r\n        default:\r\n            return state\r\n    }\r\n\r\n    return state\r\n}","import React from \"react\";\r\nimport s from \"./Posts.module.scss\";\r\nimport { PostType } from \"../../../../redux/store\";\r\n\r\n\r\nexport const Posts = (props: PostType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <header className={s.postHeader}>\r\n                <div className={s.postHeaderName}>\r\n                    {props.name}\r\n                </div>\r\n                <div className={s.postHeaderTime}>\r\n                    {props.time}\r\n                </div>\r\n            </header>\r\n            <div className={s.postInner}>\r\n                <div>\r\n                <img src={props.avatar} alt=\"\"/>\r\n                </div>\r\n                <div className={s.postInnerText}>\r\n                    {props.message}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.like}>{props.like} </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport {Posts} from \"./Post/Posts\";\r\nimport {PostType} from \"../../../redux/store\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    message: string\r\n    addPost: ()=> void\r\n    error:string | null\r\n    posts:Array<PostType>\r\n    updateNewPostText:(e: React.ChangeEvent<HTMLTextAreaElement>)=> void\r\n}\r\n\r\n// let addPostActionCreator = () => {\r\n//     return {\r\n//         type: \"TEXT-ADD-POST\",\r\n//         newText: text\r\n//     }\r\n// }\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    let postElement = props.posts.map(p => <Posts name={p.name}\r\n                                                  time={p.time}\r\n                                                  avatar={p.avatar}\r\n                                                  message={p.message} like={p.like}/>)\r\n\r\n    return (<div className={s.myPosts}>\r\n            <h3> my posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        className={props.error ? s.error : \"\"}\r\n                        value={props.message}\r\n                        onChange={props.updateNewPostText}\r\n                        placeholder={\"AddPost\"}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={props.addPost}>add post\r\n                    </button>\r\n                    {props.error && <div className={s.errorMessage}>{props.error}</div>}\r\n                </div>\r\n            </div>\r\n            {postElement}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {addPostAC, textAddPostAC} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {ActionType, PostType} from \"../../../redux/store\";\r\n\r\n\r\ntype MyPostsContainerPropsType = {\r\n    message: string\r\n    posts: Array<PostType>\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\n\r\nexport const MyPostsContainer = (props: MyPostsContainerPropsType) => {\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n    const addPost = () => {\r\n        if (props.message.trim()) {\r\n            props.dispatch(addPostAC())\r\n        } else {\r\n            setError(\"Необходимно ввести текст\")\r\n        }\r\n\r\n    }\r\n    const textAddPost = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value\r\n        props.dispatch(textAddPostAC(text))\r\n    }\r\n\r\n\r\n    return (<MyPosts\r\n            error={error}\r\n            addPost={addPost}\r\n            posts={props.posts}\r\n            message={props.message}\r\n            updateNewPostText={textAddPost}\r\n        />\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Profile.module.scss\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {ActionType, ProfilePageType} from \"../../redux/store\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostContainer\";\r\n\r\ntype DialogsPropsType = {\r\n    profilePage: ProfilePageType\r\n    dispatch: (action:ActionType) => void\r\n\r\n}\r\n\r\n\r\nexport const Profile = (props: DialogsPropsType) => {\r\n    return (\r\n        <div className={s.Profile}>\r\n            <img src=\"https://www.gettyimages.pt/gi-resources/images/Homepage/Hero/PT/PT_hero_42_153645159.jpg\"\r\n                 alt=\"\"/>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer\r\n                message={props.profilePage.changeTextNewPost}\r\n                posts={props.profilePage.posts}\r\n                dispatch={props.dispatch}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Setting = () => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}","import {DialogsType, MessagesType} from \"./types\";\r\n\r\nexport type ActionType = AddMessageACType | TextAddMessageACType\r\n\r\n\r\ntype InitialStateType = {\r\n    textAddMessage: string,\r\n    dialog: Array<DialogsType>\r\n    message: Array<MessagesType>\r\n}\r\n\r\n\r\nlet initialState = {\r\n    textAddMessage: \"\",\r\n    dialog: [\r\n        {name: \"Den\", id: 1},\r\n        {name: \"SmiT\", id: 2},\r\n        {name: \"Braun\", id: 3}\r\n    ] as Array<DialogsType>,\r\n\r\n    message: [\r\n        {message: \"Hi\", id: 1},\r\n        {message: \"How are you?\", id: 2},\r\n        {message: \"Yo\", id: 3}\r\n    ] as Array<MessagesType>\r\n}\r\n\r\nexport type AddMessageACType = {\r\n    type:\"ADD_MESSAGE\"\r\n}\r\n\r\n\r\nexport const AddMessageAC  = ( ):AddMessageACType => ({type: \"ADD_MESSAGE\" })\r\n\r\nexport type TextAddMessageACType = {\r\n    type: \"TEXT-ADD-MESSAGE\"\r\n    newText: string\r\n}\r\n\r\nexport const TextAddMessageAC = (newText: string): TextAddMessageACType => {\r\n    return {\r\n        type: \"TEXT-ADD-MESSAGE\",\r\n        newText: newText\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: ActionType) :InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD_MESSAGE\":\r\n            let newMessage = {\r\n                message: state.textAddMessage\r\n                , id: 4\r\n            }\r\n            state.message.push(newMessage)\r\n            state.textAddMessage = \"\"\r\n            break;\r\n\r\n        case \"TEXT-ADD-MESSAGE\":\r\n            state.textAddMessage = action.newText\r\n            break;\r\n        default:\r\n            return state\r\n    }\r\n\r\n    return state\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogType = {\r\n    name:string\r\n    id:number\r\n}\r\n\r\nexport const DialogItem = (props: DialogType) => {\r\n\r\n    let path = `/dialogs/${props.id}`\r\n    let name = props.name\r\n\r\n    return (<div>\r\n            <NavLink activeClassName={s.active} to={path}>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.scss\";\r\n\r\ntype MessageType = {\r\n    message:string\r\n}\r\n\r\nexport const MessageItem = (props: MessageType) => {\r\n    return (\r\n        <div className={s.messageItem} >\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from \"./Dialogs.module.scss\";\r\nimport {DialogItem} from \"./Dialog/DialogItem\";\r\nimport {MessageItem} from \"./Message/MessageItem\";\r\nimport { DialogsPageType} from \"../../redux/store\";\r\n\r\ntype DialogsType = {\r\n    dialogs: DialogsPageType\r\n    error:string | null\r\n    addPost:()=> void\r\n    addTextMessage: (e: ChangeEvent<HTMLTextAreaElement>) => void\r\n}\r\n\r\nexport const Dialogs = (props: DialogsType) => {\r\n\r\n\r\n    let dialogElement = props.dialogs.dialog.map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>)\r\n    let messageElement = props.dialogs.message.map(message => <MessageItem message={message.message}/>)\r\n    let textAddPost = React.createRef<HTMLTextAreaElement>()\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItem}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.message}>\r\n                {messageElement}\r\n                <div className={s.addPost}>\r\n                    <textarea className={props.error ? s.error : \"\"}\r\n                              value={props.dialogs.textAddMessage}\r\n                              onChange={props.addTextMessage}\r\n                              ref={textAddPost}> </textarea>\r\n                    <button onClick={props.addPost}>add post</button>\r\n                    {props.error && <div className={s.errorMessage}>{props.error}</div>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {ActionType, DialogsPageType} from \"../../redux/store\";\r\nimport {AddMessageAC, TextAddMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\n\r\ntype DialogsType = {\r\n    dialogs: DialogsPageType\r\n    dispatch: (action: ActionType) => void\r\n}\r\n\r\nexport const DialogsContainer = (props: DialogsType) => {\r\n\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n    let addPost = () => {\r\n        if (props.dialogs.textAddMessage.trim()) {\r\n            props.dispatch(AddMessageAC())\r\n        } else {\r\n            setError(\"Необходимно ввести текст\")\r\n        }\r\n    }\r\n\r\n\r\n    const addTextMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        let text = e.currentTarget.value\r\n        props.dispatch(TextAddMessageAC(text))\r\n    }\r\n\r\n    return (\r\n        <Dialogs error={error}\r\n                 addPost={addPost}\r\n                 dialogs={props.dialogs}\r\n                 addTextMessage={addTextMessage}\r\n        />\r\n    )\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {NavBar} from \"./components/NavBar/NavBar\";\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {Route} from 'react-router-dom';\r\nimport {News} from \"./components/News/News\";\r\nimport {Music} from \"./components/Music/Music\";\r\nimport {Setting} from \"./components/Setting/Setting\";\r\nimport {AppStateType} from './redux/redux-store';\r\nimport {Dispatch} from \"redux\";\r\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\r\n\r\ntype AppPropsType = {\r\n    store: AppStateType\r\n    dispatch: Dispatch\r\n}\r\n\r\nconst App = (props: AppPropsType) => {\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <Header/>\r\n            <div className={\"body\"}>\r\n                <NavBar/>\r\n                <div className={\"app-wrapper-content\"}>\r\n                    <Route path={\"/profile\"}\r\n                           render={() => <Profile\r\n                               profilePage={props.store.profilePage}\r\n                               dispatch={props.dispatch}\r\n                           />}/>\r\n                    <Route path={\"/dialogs\"}\r\n                           render={() => <DialogsContainer\r\n                               dispatch={props.dispatch}\r\n                               dialogs={props.store.dialogsPage}/>}/>\r\n                    <Route path={\"/news\"}\r\n                           render={() => <News/>}/>\r\n                    <Route path={\"/music\"}\r\n                           render={() => <Music/>}/>\r\n                    <Route path={\"/settings\"}\r\n                           render={() => <Setting/>}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer\r\n})\r\n\r\ntype ReducersType = typeof  reducers\r\nexport type AppStateType = ReturnType<ReducersType>\r\n\r\nexport let store = createStore(reducers)","import './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\nimport {store} from \"./redux/redux-store\";\r\nimport { RootStateType } from './redux/types';\r\n\r\nlet rerenderEntireTree = (state: RootStateType) => {\r\n    ReactDOM.render(<BrowserRouter> <App store={store.getState()} dispatch={store.dispatch.bind(store)}\r\n        /></BrowserRouter>,\r\n        document.getElementById('root'));\r\n}\r\nrerenderEntireTree(store.getState())\r\n\r\nstore.subscribe(() => {\r\n    let state = store.getState()\r\n    rerenderEntireTree(state)\r\n})\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2gYb2\",\"active\":\"NavBar_active__2Jz7P\",\"item\":\"NavBar_item__21Cku\",\"settings\":\"NavBar_settings__3mj7s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3FoeP\",\"dialogItem\":\"Dialogs_dialogItem__3tyjt\",\"active\":\"Dialogs_active__2clQq\",\"message\":\"Dialogs_message__3dR5D\",\"messageItem\":\"Dialogs_messageItem__2t7-l\",\"addPost\":\"Dialogs_addPost__3r6f1\",\"errorMessage\":\"Dialogs_errorMessage__HVgs-\",\"error\":\"Dialogs_error__2H5bx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Posts_post__3ANvF\",\"postHeader\":\"Posts_postHeader__iBsHV\",\"postInner\":\"Posts_postInner__3M8c3\",\"postInnerText\":\"Posts_postInnerText__1ntUH\"};"],"sourceRoot":""}