{"version":3,"sources":["components/Dialogs/Dialogs.module.scss","components/Profile/MyPosts/Post/Posts.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Users/Users.module.scss","components/Header/Header.module.scss","assets/user.jpg","components/Profile/Profile.module.scss","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/NavBar/NavBar.module.scss","serviceWorker.ts","components/Header/Header.tsx","components/NavBar/NavBar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Setting/Setting.tsx","redux/dialogs-reducer.tsx","components/Dialogs/Dialog/DialogItem.tsx","components/Dialogs/Message/MessageItem.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","components/Users/Users.tsx","redux/users-reducer.tsx","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.tsx","components/Profile/MyPosts/Post/Posts.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","App.tsx","redux/redux-store.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","src","alt","NavBar","nav","item","to","activeClassName","active","settings","News","Music","Setting","initialState","textAddMessage","dialog","name","id","v1","message","DialogItem","props","path","MessageItem","messageItem","DialogsContainer","connect","state","dialogsPage","addPost","type","addTextMessage","newText","useState","error","setError","valueTextMessage","dialogElement","map","messageElement","dialogs","dialogItem","value","onChange","e","currentTarget","onClick","trim","errorMessage","Users","pageCounter","Math","ceil","userCount","userPageCount","page","i","push","p","onPageChanged","pageActive","users","u","key","main","photos","small","userPhoto","status","followed","unFollow","follow","isFetching","UserContainer","pageNumber","setFetchingFalse","setPageActive","axios","get","then","res","setFetching","setUsers","data","items","setUserCount","totalCount","this","setUsersCount","setUsersCounter","React","Component","UsersContainer","usersPage","usersID","usersCount","ProfileInfo","aboutMe","profile","fullName","changeTextNewPost","posts","time","avatar","like","Posts","post","postHeader","postHeaderName","postHeaderTime","postInner","postInnerText","MyPostsContainer","profilePage","updateNewPostText","postElement","myPosts","placeholder","Profile","large","ProfileContainer","userId","params","withCredentials","setProfile","withRouter","App","render","reducers","combineReducers","action","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,WAAa,4BAA4B,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,6BAA6B,QAAU,yBAAyB,aAAe,8BAA8B,MAAQ,yB,mBCArSD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,WAAa,0BAA0B,UAAY,yBAAyB,cAAgB,+B,mBCAzID,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,MAAQ,yB,mBCA1GD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,OAAS,wB,mBCAtDD,EAAOC,QAAU,CAAC,OAAS,yB,mBCD3BD,EAAOC,QAAU,IAA0B,kC,mBCC3CD,EAAOC,QAAU,CAAC,QAAU,2B,mBCA5BD,EAAOC,QAAU,CAAC,YAAc,mC,sDCAhCD,EAAOC,QAAU,CAAC,IAAM,oBAAoB,OAAS,uBAAuB,KAAO,qBAAqB,SAAW,2B,uFCW/FC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qECfOC,EAAS,WAClB,OACI,4BAAQC,UAAWC,IAAEC,QAAQ,yBACzBC,IAAI,wGACJC,IAAI,O,gBCFHC,EAAS,WAClB,OACI,yBAAKL,UAAWC,IAAEK,KACd,yBAAKN,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBR,IAAES,QAA3C,YAEJ,yBAAKV,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBR,IAAES,QAA1C,aAEJ,yBAAKV,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBR,IAAES,QAAxC,UAEJ,yBAAKV,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBR,IAAES,QAAvC,SAEJ,yBAAKV,UAAWC,IAAEM,MACd,kBAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBR,IAAES,QAAxC,UAEJ,yBAAKV,UAAS,UAAKC,IAAEM,KAAP,YAAeN,IAAEU,WAC3B,kBAAC,IAAD,CAASH,GAAG,YAAYC,gBAAiBR,IAAES,QAA3C,e,OCtBHE,EAAO,WAChB,OACI,sCCFKC,EAAQ,WACjB,OACI,uCCFKC,EAAU,WACnB,OACI,0C,uBCUJC,EAAe,CACfC,eAAgB,GAChBC,OAAQ,CACJ,CAACC,KAAM,MAAOC,GAAIC,eAClB,CAACF,KAAM,OAAQC,GAAIC,eACnB,CAACF,KAAM,QAASC,GAAIC,gBAGxBC,QAAS,CACL,CAACA,QAAS,KAAMF,GAAIC,eACpB,CAACC,QAAS,eAAgBF,GAAIC,eAC9B,CAACC,QAAS,KAAMF,GAAIC,iB,yBChBfE,EAAa,SAACC,GAEvB,IAAIC,EAAI,mBAAeD,EAAMJ,IACzBD,EAAOK,EAAML,KAEjB,OAAQ,6BACA,kBAAC,IAAD,CAAST,gBAAiBR,IAAES,OAAQF,GAAIgB,GACnCN,KCTJO,EAAc,SAACF,GACxB,OACI,yBAAKvB,UAAWC,IAAEyB,aACbH,EAAMF,U,QCcNM,EAAmBC,aAlBX,SAACC,GAElB,MAAO,CACHZ,OAAQY,EAAMC,YAAYb,OAC1BI,QAASQ,EAAMC,YAAYT,QAC3BL,eAAgBa,EAAMC,YAAYd,kBAac,CACpDe,QHwCmB,iBAAO,CAACC,KAAM,gBGxCzBC,eH2CkB,SAACC,GAC3B,MAAO,CACHF,KAAM,mBACNE,QAASA,KG/CeN,ECVT,SAACL,GAA4B,MAExBY,mBAAwB,MAFA,mBAE3CC,EAF2C,KAEpCC,EAFoC,KAU1CC,EAAmBf,EAAMP,eAK3BuB,EAAgBhB,EAAMN,OAAOuB,KAAI,SAAAvB,GAAM,OAAI,kBAAC,EAAD,CAAYC,KAAMD,EAAOC,KAAMC,GAAIF,EAAOE,QACrFsB,EAAiBlB,EAAMF,QAAQmB,KAAI,SAAAnB,GAAO,OAAI,kBAAC,EAAD,CAAaA,QAASA,EAAQA,aAEhF,OACI,yBAAKrB,UAAWC,IAAEyC,SACd,yBAAK1C,UAAWC,IAAE0C,YACbJ,GAEL,yBAAKvC,UAAWC,IAAEoB,SACboB,EACD,yBAAKzC,UAAWC,IAAE8B,SACd,8BACI/B,UAAWoC,EAAQnC,IAAEmC,MAAQ,GAC7BQ,MAAON,EACPO,SAlBW,SAACC,GAC5BvB,EAAMU,eAAea,EAAEC,cAAcH,SAczB,KAKA,4BAAQI,QA5BV,WACNzB,EAAMP,eAAeiC,OACrB1B,EAAMQ,UAENM,EAAS,4IAwBD,YACCD,GAAS,yBAAKpC,UAAWC,IAAEiD,cAAed,S,kEC3BlDe,EAAQ,SAAC5B,GAGlB,IAFA,IAAI6B,EAAcC,KAAKC,MAAM/B,EAAMgC,WAAahC,EAAMiC,eAClDC,EAAO,GACFC,EAAI,EAAGA,GAAKN,EAAaM,IAC9BD,EAAKE,KAAKD,GAEd,OAEI,6BACKD,EAAKjB,KAAI,SAAAoB,GAAC,OAEP,0BAAMZ,QAAS,kBAAMzB,EAAMsC,cAAcD,IACnC5D,UAAW4D,IAAMrC,EAAMuC,WAAa7D,IAAES,OAAS,IAAKkD,MAG7DrC,EAAMwC,MAAMvB,KAAI,SAAAwB,GAAC,OACd,yBAAKC,IAAKD,EAAE7C,GAAInB,UAAWC,IAAEiE,MACzB,kBAAC,IAAD,CAAS1D,GAAI,YAAcwD,EAAE7C,IAC7B,yBAAKhB,IAAK6D,EAAEG,OAAOC,MAAQJ,EAAEG,OAAOC,MAAQC,IAAWjE,IAAI,MAE3D,6BAAM4D,EAAE9C,MACR,6BAAM8C,EAAEM,QACPN,EAAEO,SACG,4BAAQvB,QAAS,WACfzB,EAAMiD,SAASR,EAAE7C,MADnB,YAGA,4BAAQ6B,QAAS,WACfzB,EAAMkD,OAAOT,EAAE7C,MADjB,gBCtBtBJ,EAAe,CACfgD,MAAO,GACPR,UAAW,EACXC,cAAe,IACfM,WAAY,EACZY,YAAY,G,iBCRHC,EAAb,4MAWId,cAAgB,SAACe,GACb,EAAKrD,MAAMsD,mBACX,EAAKtD,MAAMuD,cAAcF,GACzBG,IAAMC,IAAN,kEAAgFJ,EAAhF,kBAAoG,EAAKrD,MAAMiC,gBAC1GyB,MAAK,SAACC,GACH,EAAK3D,MAAM4D,cACX,EAAK5D,MAAM6D,SAASF,EAAIG,KAAKC,OAC7B,EAAK/D,MAAMgE,aAAaL,EAAIG,KAAKG,gBAlBjD,kEAEyB,IAAD,OAChBT,IAAMC,IAAN,kEAAgFS,KAAKlE,MAAMuC,WAA3F,kBAA+G2B,KAAKlE,MAAMiC,gBACrHyB,MAAK,SAACC,GACH,EAAK3D,MAAM4D,cACX,EAAK5D,MAAM6D,SAASF,EAAIG,KAAKC,OAC7B,EAAK/D,MAAMgE,aAAaL,EAAIG,KAAKG,iBAPjD,+BA2BQ,OAAQC,KAAKlE,MAAMmD,WACf,kBAAC,EAAD,CACIX,MAAO0B,KAAKlE,MAAMwC,MAClBU,OAAQgB,KAAKlE,MAAMkD,OACnBD,SAAUiB,KAAKlE,MAAMiD,SACrBY,SAAUK,KAAKlE,MAAM6D,SACrB7B,UAAWkC,KAAKlE,MAAMgC,UACtBO,WAAY2B,KAAKlE,MAAMuC,WACvBD,cAAe4B,KAAK5B,cACpBiB,cAAeW,KAAKlE,MAAMuD,cAC1BtB,cAAeiC,KAAKlE,MAAMiC,cAC1BkC,cAAeD,KAAKlE,MAAMoE,kBACzB,iHAvCjB,GAAmCC,IAAMC,WA+E5BC,EAAiBlE,aApCR,SAACC,GACnB,MAAO,CACHkC,MAAOlC,EAAMkE,UAAUhC,MACvBR,UAAW1B,EAAMkE,UAAUxC,UAC3BC,cAAe3B,EAAMkE,UAAUvC,cAC/BM,WAAYjC,EAAMkE,UAAUjC,WAC5BY,WAAY7C,EAAMkE,UAAUrB,cA+BhC,CAACD,ODXiB,SAACuB,GAAD,MAAsB,CAAChE,KAAM,SAAUgE,QAASA,ICWzDxB,SDTW,SAACwB,GAAD,MAAsB,CAAChE,KAAM,WAAYgE,QAASA,ICSnDZ,SDPC,SAACrB,GAAD,MAA8B,CAAC/B,KAAM,YAAa+B,MAAOA,ICOhDe,cDFJ,SAACrB,GAAD,MAAmB,CAACzB,KAAM,WAAYyB,SCG3D8B,aDDoB,SAACU,GAAD,MAAyB,CAACjE,KAAM,iBAAkBiE,eCCxDd,YDNK,iBAAO,CAACnD,KAAM,sBCMN6C,iBDLH,iBAAO,CAAC7C,KAAM,wBCGhBJ,CAEwB+C,G,kCC1FzCuB,EAAc,SAAC3E,GAAuB,IAAD,IAE1C4E,EAAO,UAAG5E,EAAM6E,eAAT,aAAG,EAAeD,QAE7B,OACI,yBAAKnG,UAAWC,IAAEiG,aACd,8CACe3E,EAAM6E,QAAQC,WAE7B,6BACKF,EAAO,8BAAiB5E,EAAM6E,eAAvB,aAAiB,EAAeD,SAAY,MCchEpF,EAAe,CACfuF,kBAAmB,GACnBC,MAAO,CACH,CACIrF,KAAM,OACNsF,KAAM,QACNC,OAAQ,4CACRpF,QAAS,MACTqF,KAAM,KAGdN,QAAS,GACT1B,YAAY,G,kCC1CHiC,EAAQ,SAACpF,GAClB,OACI,yBAAKvB,UAAWC,IAAE2G,MACd,4BAAQ5G,UAAWC,IAAE4G,YACjB,yBAAK7G,UAAWC,IAAE6G,gBACbvF,EAAML,MAEX,yBAAKlB,UAAWC,IAAE8G,gBACbxF,EAAMiF,OAGf,yBAAKxG,UAAWC,IAAE+G,WACd,6BACA,yBAAK7G,IAAKoB,EAAMkF,OAAQrG,IAAI,MAE5B,yBAAKJ,UAAWC,IAAEgH,eACb1F,EAAMF,UAIf,yBAAKrB,UAAWC,IAAEyG,MAAOnF,EAAMmF,KAA/B,OCwBCQ,GAAmBtF,aATX,SAACC,GAClB,MAAO,CACH0E,MAAO1E,EAAMsF,YAAYZ,MACzBlF,QAASQ,EAAMsF,YAAYb,qBAMqB,CAACvE,QFoBlC,iBAAsB,CAACC,KAAM,aEpBcoF,kBFKjC,SAAClF,GAC9B,MAAO,CACHF,KAAM,gBACNE,QAASA,KEReN,EC7BT,SAACL,GAA6B,IAAD,EAExBY,mBAAwB,MAFA,mBAE3CC,EAF2C,KAEpCC,EAFoC,KAe5CgF,EAAc9F,EAAMgF,MAAM/D,KAAI,SAAAoB,GAAC,OAAI,kBAAC,EAAD,CACnC1C,KAAM0C,EAAE1C,KACRsF,KAAM5C,EAAE4C,KACRC,OAAQ7C,EAAE6C,OACVpF,QAASuC,EAAEvC,QACXqF,KAAM9C,EAAE8C,UAEZ,OAAQ,yBAAK1G,UAAWC,IAAEqH,SAClB,yCACA,6BACI,6BACI,8BACItH,UAAWoC,EAAQnC,IAAEmC,MAAQ,GAC7BQ,MAAOrB,EAAMF,QACbwB,SAlBM,SAACC,GACvBvB,EAAM6F,kBAAkBtE,EAAEC,cAAcH,QAkBxB2E,YAAa,aAGrB,6BACI,4BAAQvE,QA/BR,WAERzB,EAAMF,QAAQ4B,OACd1B,EAAMQ,UAENM,EAAS,4IA0BD,YAECD,GAAS,yBAAKpC,UAAWC,IAAEiD,cAAed,KAGlDiF,MC7CAG,GAAU,SAACjG,GAA6B,IAAD,EAG5C4C,EAAM,UAAG5C,EAAM6E,QAAQjC,cAAjB,aAAG,EAAsBsD,MAEnC,OACI,yBAAKzH,UAAWC,IAAEuH,SAEd,yBAAKrH,IAAKgE,GAAkB,aACvB/D,IAAI,KAET,kBAAC,EAAD,CAAagG,QAAS7E,EAAM6E,UAC5B,kBAACc,GAAD,QCDCQ,GAAb,kLAGyB,IAAD,OAEZC,EAASlC,KAAKlE,MAAMzB,MAAM8H,OAAOD,OAChCA,IACDA,EAAS,SAGb5C,IAAMC,IAAN,+DAA+E2C,GAAU,CACrFE,iBAAiB,IAEhB5C,MAAK,SAACC,GACH,EAAK3D,MAAMuG,WAAW5C,EAAIG,WAd1C,+BAoBQ,OAAO,kBAAC,GAAD,CAASe,QAASX,KAAKlE,MAAM6E,cApB5C,GAAsCR,IAAMC,WA6B7BkC,eAAWnG,aALH,SAACC,GAAD,MAA2B,CAC9CuE,QAASvE,EAAMsF,YAAYf,WAImB,CAAC0B,WLiBzB,SAAC1B,GAAD,MAA2C,CAACpE,KAAM,cAAeoE,aKjBjExE,CAAsC8F,KCVjDM,GA9BH,WAER,OACI,yBAAKhI,UAAU,eACX,kBAAC,EAAD,MACA,yBAAKA,UAAW,QACZ,kBAAC,EAAD,MACA,yBAAKA,UAAW,uBACZ,kBAAC,IAAD,CAAOwB,KAAM,oBACNyG,OAAQ,kBAAM,kBAAC,GAAD,SACrB,kBAAC,IAAD,CAAOzG,KAAM,WACNyG,OAAQ,kBAAM,kBAACtG,EAAD,SACrB,kBAAC,IAAD,CAAOH,KAAM,QACNyG,OAAQ,kBAAM,kBAAC,EAAD,SACrB,kBAAC,IAAD,CAAOzG,KAAM,SACNyG,OAAQ,kBAAM,kBAAC,EAAD,SACrB,kBAAC,IAAD,CAAOzG,KAAM,YACNyG,OAAQ,kBAAM,kBAAC,EAAD,SACrB,kBAAC,IAAD,CAAOzG,KAAM,SACNyG,OAAQ,kBAAM,kBAACnC,EAAD,a,SC1BrCoC,GAAWC,aAAgB,CAC3BhB,YPkE0B,WAAmF,IAAlFtF,EAAiF,uDAAvDd,EAAcqH,EAAyC,uCAC5G,OAAQA,EAAOpG,MACX,IAAK,WACD,OAAO,2BACAH,GADP,IAEI0E,MAAM,GAAD,mBAAM1E,EAAM0E,OAAZ,CAAmB,CACpBrF,KAAM,OACNG,QAASQ,EAAMyE,kBACfE,KAAM,QACNC,OAAQ,4CACRC,KAAM,KAEVJ,kBAAmB,KAE3B,IAAK,gBACD,OAAO,2BACAzE,GADP,IAEIyE,kBAAmB8B,EAAOlG,UAElC,IAAK,cACD,OAAO,2BAEAL,GAFP,IAGIuE,QAASgC,EAAOhC,UAExB,QACI,OAAOvE,IO3FfC,YhB+B0B,WAAiG,IAAhGD,EAA+F,uDAA9Dd,EAAcqH,EAAgD,uCAG1H,OAAQA,EAAOpG,MACX,IAAK,cACD,OAAO,2BACAH,GADP,IAEIR,QAAQ,GAAD,mBAAMQ,EAAMR,SAAZ,CAAqB,CACxBA,QAASQ,EAAMb,eACbG,GAAIC,iBAEVJ,eAAgB,KAGxB,IAAK,mBACD,OAAO,2BACAa,GADP,IAEIb,eAAgBoH,EAAOlG,UAG/B,QACI,OAAOL,IgBnDfkE,UVwBwB,WAA6F,IAA5FlE,EAA2F,uDAA5Dd,EAAcqH,EAA8C,uCACpH,OAAQA,EAAOpG,MACX,IAAK,oBACD,OAAO,2BACAH,GADP,IAEI6C,YAAY,IAEpB,IAAK,qBACD,OAAO,2BACA7C,GADP,IAEI6C,YAAY,IAEpB,IAAK,YACD,OAAO,2BACA7C,GADP,IAEIkC,MAAOqE,EAAOrE,QAEtB,IAAK,iBACD,OAAO,2BACAlC,GADP,IAEI0B,UAAW6E,EAAOnC,aAE1B,IAAK,WACD,OAAO,2BACApE,GADP,IAEIiC,WAAYsE,EAAO3E,OAG3B,IAAK,SACD,OAAO,2BACA5B,GADP,IAEIkC,MAAOlC,EAAMkC,MAAMvB,KAAI,SAAAwB,GACnB,OAAIA,EAAE7C,KAAOiH,EAAOpC,QACT,2BAAIhC,GAAX,IAAcO,UAAU,IAErBP,OAInB,IAAK,WACD,OAAO,2BACAnC,GADP,IAEIkC,MAAOlC,EAAMkC,MAAMvB,KAAI,SAAAwB,GACnB,OAAIA,EAAE7C,KAAOiH,EAAOpC,QACT,2BAAIhC,GAAX,IAAcO,UAAU,IAErBP,OAGnB,QACI,OAAOnC,MUnERwG,GAAQC,aAAYJ,IAI/BvI,OAAO0I,MAAQA,GCZfE,IAASN,OAAO,kBAAC,IAAD,KACR,kBAAC,IAAD,CAAUI,MAAOA,IACb,kBAAC,GAAD,QAIRG,SAASC,eAAe,SvB4HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdC,OAAM,SAAA3G,GACL4G,QAAQ5G,MAAMA,EAAMf,c","file":"static/js/main.1d0dd8af.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3FoeP\",\"dialogItem\":\"Dialogs_dialogItem__3tyjt\",\"active\":\"Dialogs_active__2clQq\",\"message\":\"Dialogs_message__3dR5D\",\"messageItem\":\"Dialogs_messageItem__2t7-l\",\"addPost\":\"Dialogs_addPost__3r6f1\",\"errorMessage\":\"Dialogs_errorMessage__HVgs-\",\"error\":\"Dialogs_error__2H5bx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Posts_post__3ANvF\",\"postHeader\":\"Posts_postHeader__iBsHV\",\"postInner\":\"Posts_postInner__3M8c3\",\"postInnerText\":\"Posts_postInnerText__1ntUH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__3ElgO\",\"errorMessage\":\"MyPosts_errorMessage__1D8KJ\",\"error\":\"MyPosts_error__TFtll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Users_main__2sjfs\",\"active\":\"Users_active__31d6I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2s73l\"};","module.exports = __webpack_public_path__ + \"static/media/user.775b91d4.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__3Z-zi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"ProfileInfo_ProfileInfo__3w-RO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2gYb2\",\"active\":\"NavBar_active__2Jz7P\",\"item\":\"NavBar_item__21Cku\",\"settings\":\"NavBar_settings__3mj7s\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Profile is cached for offline use.\" message.\n              console.log('Profile is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport s from \"./Header.module.scss\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header className={s.header}><img\r\n            src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR7zCD-dHiaNWCvKp-sGnzT7cA7MJb7jo0QOw&usqp=CAU\"\r\n            alt=\"\"/>\r\n        </header>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./NavBar.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport const NavBar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile/\" activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.settings}`}>\r\n                <NavLink to=\"/settings\" activeClassName={s.active}>Settings</NavLink>\r\n            </div>\r\n\r\n        </nav>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Setting = () => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}","import {v1} from \"uuid\";\r\n\r\nexport type ActionType =\r\n    | ReturnType<typeof addPost>\r\n    | ReturnType<typeof addTextMessage>\r\n\r\n\r\n// export type InitialStateDialogsType = {\r\n//     textAddMessage: string,\r\n//     dialog: Array<DialogsType>\r\n//     message: Array<MessagesType>\r\n// }\r\nexport type InitialStateDialogsType = typeof initialState\r\n\r\nlet initialState = {\r\n    textAddMessage: \"\",\r\n    dialog: [\r\n        {name: \"Den\", id: v1()},\r\n        {name: \"SmiT\", id: v1()},\r\n        {name: \"Braun\", id: v1()}\r\n    ] as Array<DialogsType>,\r\n\r\n    message: [\r\n        {message: \"Hi\", id: v1()},\r\n        {message: \"How are you?\", id: v1()},\r\n        {message: \"Yo\", id: v1()}\r\n    ] as Array<MessagesType>\r\n}\r\n\r\nexport type DialogsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nexport type MessagesType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\n\r\nexport const dialogsReducer = (state: InitialStateDialogsType = initialState, action: ActionType): InitialStateDialogsType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case \"ADD_MESSAGE\":\r\n            return {\r\n                ...state,\r\n                message: [...state.message, {\r\n                    message: state.textAddMessage\r\n                    , id: v1()\r\n                }],\r\n                textAddMessage: \"\"\r\n            }\r\n\r\n        case \"TEXT-ADD-MESSAGE\":\r\n            return {\r\n                ...state,\r\n                textAddMessage: action.newText\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const addPost = () => ({type: \"ADD_MESSAGE\"}) as const\r\n\r\n\r\nexport const addTextMessage = (newText: string) => {\r\n    return {\r\n        type: \"TEXT-ADD-MESSAGE\",\r\n        newText: newText\r\n    } as const\r\n}","import React from \"react\";\r\nimport s from \"./../Dialogs.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogType = {\r\n    name:string\r\n    id:string\r\n}\r\n\r\nexport const DialogItem = (props: DialogType) => {\r\n\r\n    let path = `/dialogs/${props.id}`\r\n    let name = props.name\r\n\r\n    return (<div>\r\n            <NavLink activeClassName={s.active} to={path}>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.scss\";\r\n\r\ntype MessageType = {\r\n    message:string\r\n}\r\n\r\nexport const MessageItem = (props: MessageType) => {\r\n    return (\r\n        <div className={s.messageItem} >\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n","import {addPost, addTextMessage} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapSateToProps = (state: AppStateType) => {\r\n    debugger\r\n    return {\r\n        dialog: state.dialogsPage.dialog,\r\n        message: state.dialogsPage.message,\r\n        textAddMessage: state.dialogsPage.textAddMessage,\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch:(action: ActionType) => void) => {\r\n//     return {\r\n//         addPost: () => dispatch(AddMessage()),\r\n//         addTextMessage: (text:string) => {dispatch(TextAddMessage(text))\r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\nexport const DialogsContainer = connect(mapSateToProps, {\r\n    addPost,addTextMessage})(Dialogs);","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./Dialogs.module.scss\";\r\nimport {DialogItem} from \"./Dialog/DialogItem\";\r\nimport {MessageItem} from \"./Message/MessageItem\";\r\nimport {DialogsType, MessagesType} from \"../../redux/dialogs-reducer\";\r\n\r\ntype DialogsPropsType = {\r\n    dialog: Array<DialogsType>\r\n    message: Array<MessagesType>\r\n    textAddMessage: string\r\n    addPost: () => void\r\n    addTextMessage: (text: string) => void\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    debugger\r\n    let [error, setError] = useState<string | null>(null)\r\n    let addPost = () => {\r\n        if (props.textAddMessage.trim()) {\r\n            props.addPost()\r\n        } else {\r\n            setError(\"Необходимно ввести текст\")\r\n        }\r\n    }\r\n    const valueTextMessage = props.textAddMessage\r\n    const changeValueTextMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.addTextMessage(e.currentTarget.value)\r\n    }\r\n\r\n    let dialogElement = props.dialog.map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>)\r\n    let messageElement = props.message.map(message => <MessageItem message={message.message}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItem}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.message}>\r\n                {messageElement}\r\n                <div className={s.addPost}>\r\n                    <textarea\r\n                        className={error ? s.error : \"\"}\r\n                        value={valueTextMessage}\r\n                        onChange={changeValueTextMessage}\r\n                    > </textarea>\r\n                    <button onClick={addPost}>add post</button>\r\n                    {error && <div className={s.errorMessage}>{error}</div>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Users.module.scss\"\r\nimport userPhoto from \"../../assets/user.jpg\"\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersPropsType = {\r\n    pageActive: number\r\n    setPageActive: (page: number) => void\r\n    userPageCount: number\r\n    userCount: number\r\n    setUsersCount: (userCounter: number) => void\r\n    users: Array<UsersType>\r\n    setUsers: (users: Array<UsersType>) => void\r\n    follow: (userID: string) => void\r\n    unFollow: (userID: string) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n}\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n    let pageCounter = Math.ceil(+props.userCount / +props.userPageCount)\r\n    let page = []\r\n    for (let i = 1; i <= pageCounter; i++) {\r\n        page.push(i)\r\n    }\r\n    return (\r\n\r\n        <div>\r\n            {page.map(p =>\r\n\r\n                <span onClick={() => props.onPageChanged(p)}\r\n                      className={p === props.pageActive ? s.active : \"\"}>{p}</span>)}\r\n\r\n\r\n            {props.users.map(u =>\r\n                <div key={u.id} className={s.main}>\r\n                    <NavLink to={\"/profile/\" + u.id}>\r\n                    <img src={u.photos.small ? u.photos.small : userPhoto} alt=\"\"/>\r\n                    </NavLink>\r\n                    <div>{u.name}</div>\r\n                    <div>{u.status}</div>\r\n                    {u.followed\r\n                        ? <button onClick={() => {\r\n                            props.unFollow(u.id)\r\n                        }}>UnFollow</button>\r\n                        : <button onClick={() => {\r\n                            props.follow(u.id)\r\n                        }}>Follow</button>}\r\n\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n","export type ActionType =\r\n    | ReturnType<typeof follow>\r\n    | ReturnType<typeof unFollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setUserCount>\r\n    | ReturnType<typeof setPageActive>\r\n    | ReturnType<typeof setFetching>\r\n    | ReturnType<typeof setFetchingFalse>\r\n\r\nexport type UsersType = {\r\n    id: string\r\n    name: string\r\n    status: string\r\n    photos: PhotoType\r\n    followed: boolean\r\n}\r\n\r\n\r\nexport type PhotoType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    userCount: 0,\r\n    userPageCount: 100,\r\n    pageActive: 1,\r\n    isFetching: false\r\n}\r\n\r\nexport type InitialStateUsersType = typeof initialState\r\n\r\n\r\nexport const usersReducer = (state: InitialStateUsersType = initialState, action: ActionType): InitialStateUsersType => {\r\n    switch (action.type) {\r\n        case \"SET_FETCHING_TRUE\":\r\n            return {\r\n                ...state,\r\n                isFetching: true\r\n            }\r\n        case \"SET_FETCHING_FALSE\":\r\n            return {\r\n                ...state,\r\n                isFetching: false\r\n            }\r\n        case \"SET_USERS\":\r\n            return {\r\n                ...state,\r\n                users: action.users\r\n            }\r\n        case \"SET_USER_COUNT\" :\r\n            return {\r\n                ...state,\r\n                userCount: action.usersCount\r\n            }\r\n        case \"SET_PAGE\" :\r\n            return {\r\n                ...state,\r\n                pageActive: action.page\r\n            }\r\n\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.usersID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.usersID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const follow = (usersID: string) => ({type: \"FOLLOW\", usersID: usersID}) as const\r\n\r\nexport const unFollow = (usersID: string) => ({type: \"UNFOLLOW\", usersID: usersID}) as const\r\n\r\nexport const setUsers = (users: Array<UsersType>) => ({type: \"SET_USERS\", users: users}) as const\r\n\r\nexport const setFetching = () => ({type: \"SET_FETCHING_TRUE\"}) as const\r\nexport const setFetchingFalse = () => ({type: \"SET_FETCHING_FALSE\"}) as const\r\n\r\nexport const setPageActive = (page: number) => ({type: \"SET_PAGE\", page}) as const\r\n\r\nexport const setUserCount = (usersCount: number) => ({type: \"SET_USER_COUNT\", usersCount}) as const\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {Users} from \"./Users\";\r\nimport {UsersType} from \"../../redux/store\";\r\nimport {\r\n    follow,\r\n    unFollow,\r\n    setUsers,\r\n    setUserCount,\r\n    setPageActive, setFetching, setFetchingFalse\r\n} from \"../../redux/users-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\n\r\ntype AxiosType = {\r\n    items: Array<UsersType>\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport class UserContainer extends React.Component<any> {\r\n\r\n    componentDidMount() {\r\n        axios.get<AxiosType>(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.pageActive}&count=${this.props.userPageCount}`)\r\n            .then((res) => {\r\n                this.props.setFetching()\r\n                this.props.setUsers(res.data.items)\r\n                this.props.setUserCount(res.data.totalCount)\r\n            })\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setFetchingFalse()\r\n        this.props.setPageActive(pageNumber)\r\n        axios.get<AxiosType>(`https://social-network.samuraijs.com/api/1.0/users?page=${pageNumber}&count=${this.props.userPageCount}`)\r\n            .then((res) => {\r\n                this.props.setFetching()\r\n                this.props.setUsers(res.data.items)\r\n                this.props.setUserCount(res.data.totalCount)\r\n            })\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        return (this.props.isFetching ?\r\n            <Users\r\n                users={this.props.users}\r\n                follow={this.props.follow}\r\n                unFollow={this.props.unFollow}\r\n                setUsers={this.props.setUsers}\r\n                userCount={this.props.userCount}\r\n                pageActive={this.props.pageActive}\r\n                onPageChanged={this.onPageChanged}\r\n                setPageActive={this.props.setPageActive}\r\n                userPageCount={this.props.userPageCount}\r\n                setUsersCount={this.props.setUsersCounter}\r\n            /> : <div>Идет загрузка...</div>)\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: state.usersPage.users,\r\n        userCount: state.usersPage.userCount,\r\n        userPageCount: state.usersPage.userPageCount,\r\n        pageActive: state.usersPage.pageActive,\r\n        isFetching: state.usersPage.isFetching\r\n    }\r\n}\r\n\r\n// let mapDispatchToProps = (dispatch: (action: ActionType) => void) => {\r\n//     return {\r\n//         follow: (usersID: string) => {\r\n//             dispatch(FollowAC(usersID))\r\n//         },\r\n//         unFollow: (usersID: string) => {\r\n//             dispatch(UnFollowAC(usersID))\r\n//         },\r\n//         setUsers: (users: Array<UsersType>) => {\r\n//             dispatch(setUsersAC(users))\r\n//         },\r\n//         setPageActive: (page: number) => {\r\n//             dispatch(setPageActiveAC(page))\r\n//         },\r\n//         setUsersCounter: (usersCounter: number) => {\r\n//             dispatch(setUserCountAC(usersCounter))\r\n//         },\r\n//         setFetching: () => {\r\n//             dispatch(setFetchingAC())\r\n//         },\r\n//         setFetchingFalse: () => {\r\n//             dispatch(setFetchingFalseAC())\r\n//         }\r\n//     }\r\n// }\r\n\r\nexport const UsersContainer = connect(mapStateToProps,\r\n    {follow, unFollow, setUsers, setPageActive,\r\n        setUserCount, setFetching, setFetchingFalse})(UserContainer)","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfileInfo = {\r\n    profile: ProfileType\r\n}\r\n\r\n\r\n\r\nexport const ProfileInfo = (props:ProfileInfo) => {\r\n\r\n    let aboutMe = props.profile?.aboutMe\r\n\r\n    return (\r\n        <div className={s.ProfileInfo}>\r\n            <div>\r\n                {`Name:  ${props.profile.fullName}`}\r\n            </div>\r\n            <div>\r\n                {aboutMe ?  `About me: ${props.profile?.aboutMe}` : \"\"}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {PostType} from \"./types\"\r\n\r\nexport type ActionType = TextAddPostACType | AddPostACType | SetProfileType\r\n\r\n\r\nexport type InitialStateType = {\r\n    changeTextNewPost: string\r\n    posts: Array<PostType>\r\n    profile: ProfileType\r\n    isFetching: boolean\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    aboutMe: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string | null\r\n        vk: string | null\r\n        facebook: string | null\r\n        instagram: string | null\r\n        twitter: string | null\r\n        website: string | null\r\n        youtube: string | null\r\n        mainLink: string | null\r\n    }\r\n    photos: {\r\n        small: string| null\r\n        large: string| null\r\n    }\r\n}\r\n\r\n\r\nlet initialState = {\r\n    changeTextNewPost: \"\",\r\n    posts: [\r\n        {\r\n            name: \"Dart\",\r\n            time: \"10:23\",\r\n            avatar: \"https://html5css.ru/w3css/img_avatar3.png\",\r\n            message: \"bye\",\r\n            like: 25\r\n        }\r\n    ],\r\n    profile: {} as ProfileType,\r\n    isFetching: false\r\n}\r\nexport type TextAddPostACType = {\r\n    type: \"TEXT-ADD-POST\"\r\n    newText: string\r\n}\r\n\r\nexport const updateNewPostText = (newText: string): TextAddPostACType => {\r\n    return {\r\n        type: \"TEXT-ADD-POST\",\r\n        newText: newText\r\n    }\r\n}\r\nexport type AddPostACType = {\r\n    type: \"ADD-POST\"\r\n}\r\n\r\nexport type SetProfileType = {\r\n    type: \"SET_PROFILE\",\r\n    profile: ProfileType\r\n}\r\n\r\nexport const addPost = (): AddPostACType => ({type: \"ADD-POST\"})\r\n\r\nexport const setProfile = (profile: ProfileType): SetProfileType => ({type: \"SET_PROFILE\", profile})\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    name: \"Dart\",\r\n                    message: state.changeTextNewPost,\r\n                    time: \"11:00\",\r\n                    avatar: \"https://html5css.ru/w3css/img_avatar3.png\",\r\n                    like: 0\r\n                }],\r\n                changeTextNewPost: \"\"\r\n            }\r\n        case \"TEXT-ADD-POST\":\r\n            return {\r\n                ...state,\r\n                changeTextNewPost: action.newText\r\n            }\r\n        case \"SET_PROFILE\":\r\n            return {\r\n\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from \"react\";\r\nimport s from \"./Posts.module.scss\";\r\nimport { PostType } from \"../../../../redux/store\";\r\n\r\n\r\nexport const Posts = (props: PostType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <header className={s.postHeader}>\r\n                <div className={s.postHeaderName}>\r\n                    {props.name}\r\n                </div>\r\n                <div className={s.postHeaderTime}>\r\n                    {props.time}\r\n                </div>\r\n            </header>\r\n            <div className={s.postInner}>\r\n                <div>\r\n                <img src={props.avatar} alt=\"\"/>\r\n                </div>\r\n                <div className={s.postInnerText}>\r\n                    {props.message}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.like}>{props.like} </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}","import {addPost, updateNewPostText} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {RootStateType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// type MyPostsContainerPropsType = {\r\n//     message: string\r\n//     posts: Array<PostType>\r\n//     dispatch: (action: ActionType) => void\r\n// }\r\n//\r\n//\r\n// export const MyPostsContainer = (props: MyPostsContainerPropsType) => {\r\n//\r\n//     let [error, setError] = useState<string | null>(null)\r\n//     const addPost = () => {\r\n//         if (props.message.trim()) {\r\n//             props.dispatch(addPostAC())\r\n//         } else {\r\n//             setError(\"Необходимно ввести текст\")\r\n//         }\r\n//\r\n//     }\r\n//     const textAddPost = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n//         let text = e.currentTarget.value\r\n//         props.dispatch(textAddPostAC(text))\r\n//     }\r\n//\r\n//\r\n//     return (<MyPosts\r\n//             addPost={addPost}\r\n//             posts={props.posts}\r\n//             message={props.message}\r\n//             updateNewPostText={textAddPost}\r\n//         />\r\n//     )\r\n// }\r\n\r\n\r\nlet mapSateToProps = (state: RootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        message: state.profilePage.changeTextNewPost\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const MyPostsContainer = connect(mapSateToProps, {addPost, updateNewPostText })(MyPosts);","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport {Posts} from \"./Post/Posts\";\r\nimport {PostType} from \"../../../redux/store\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    message: string\r\n    addPost: () => void\r\n    posts: Array<PostType>\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\n// let addPostActionCreator = () => {\r\n//     return {\r\n//         type: \"TEXT-ADD-POST\",\r\n//         newText: text\r\n//     }\r\n// }\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n    const addPost = () => {\r\n        debugger\r\n        if (props.message.trim()) {\r\n            props.addPost()\r\n        } else {\r\n            setError(\"Необходимно ввести текст\")\r\n        }\r\n    }\r\n    const updateNewPostText = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value)\r\n    }\r\n\r\n    let postElement = props.posts.map(p => <Posts\r\n        name={p.name}\r\n        time={p.time}\r\n        avatar={p.avatar}\r\n        message={p.message}\r\n        like={p.like}/>)\r\n\r\n    return (<div className={s.myPosts}>\r\n            <h3> my posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        className={error ? s.error : \"\"}\r\n                        value={props.message}\r\n                        onChange={updateNewPostText}\r\n                        placeholder={\"AddPost\"}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>add post\r\n                    </button>\r\n                    {error && <div className={s.errorMessage}>{error}</div>}\r\n                </div>\r\n            </div>\r\n            {postElement}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Profile.module.scss\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport { MyPostsContainer } from \"./MyPosts/MyPostContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\n\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\n\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n\r\n\r\n    let photos = props.profile.photos?.large\r\n\r\n    return (\r\n        <div className={s.Profile}>\r\n\r\n            <img src={photos ? photos : \"dfgdfhdfhg\"}\r\n                 alt=\"\"/>\r\n\r\n            <ProfileInfo profile={props.profile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {ProfileType, setProfile} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\ntype RouterParams = {\r\n    userId: string\r\n}\r\n\r\ntype mapStatePropsType = {\r\n    profile: ProfileType\r\n}\r\ntype mapDispatchPropsType = {\r\n    setProfile: (profile: ProfileType) => void\r\n}\r\n\r\n\r\ntype PropsType = mapStatePropsType & mapDispatchPropsType & RouteComponentProps<RouterParams>\r\n\r\nexport class ProfileContainer extends React.Component<PropsType> {\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = \"12411\"\r\n        }\r\n\r\n        axios.get<ProfileType>(`https://social-network.samuraijs.com/api/1.0/profile/${userId}`, {\r\n            withCredentials: true\r\n        })\r\n            .then((res) => {\r\n                this.props.setProfile(res.data)\r\n                debugger\r\n            })\r\n    }\r\n\r\n    render() {\r\n        return <Profile profile={this.props.profile}/>\r\n    }\r\n}\r\n\r\nconst mapSateToProps = (state: AppStateType)  => ({\r\n    profile: state.profilePage.profile\r\n})\r\n\r\n\r\nexport default withRouter(connect(mapSateToProps, {setProfile})(ProfileContainer))\r\n\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {NavBar} from \"./components/NavBar/NavBar\";\r\nimport {Route} from 'react-router-dom';\r\nimport {News} from \"./components/News/News\";\r\nimport {Music} from \"./components/Music/Music\";\r\nimport {Setting} from \"./components/Setting/Setting\";\r\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\r\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <Header/>\r\n            <div className={\"body\"}>\r\n                <NavBar/>\r\n                <div className={\"app-wrapper-content\"}>\r\n                    <Route path={\"/profile/:userId?\"}\r\n                           render={() => <ProfileContainer/>}/>\r\n                    <Route path={\"/dialogs\"}\r\n                           render={() => <DialogsContainer/>}/>\r\n                    <Route path={\"/news\"}\r\n                           render={() => <News/>}/>\r\n                    <Route path={\"/music\"}\r\n                           render={() => <Music/>}/>\r\n                    <Route path={\"/settings\"}\r\n                           render={() => <Setting/>}/>\r\n                    <Route path={\"/users\"}\r\n                           render={() => <UsersContainer/>}/>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\n\r\ntype ReducersType = typeof  reducers\r\nexport type AppStateType = ReturnType<ReducersType>\r\n\r\nexport let store = createStore(reducers)\r\n\r\n//@ts-ignore\r\n\r\nwindow.store = store","import './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\"\r\n\r\nReactDOM.render(<BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}