{"version":3,"sources":["components/Dialogs/Dialogs.module.scss","components/Profile/MyPosts/Post/Posts.module.scss","components/Profile/MyPosts/MyPosts.module.scss","components/Header/Header.module.scss","components/Profile/Profile.module.scss","components/Profile/ProfileInfo/ProfileInfo.module.scss","components/Users/Users.module.scss","components/NavBar/NavBar.module.scss","serviceWorker.ts","components/Header/Header.tsx","components/NavBar/NavBar.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/profile-reducer.tsx","components/Profile/MyPosts/Post/Posts.tsx","components/Profile/MyPosts/MyPostContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Setting/Setting.tsx","redux/dialogs-reducer.tsx","components/Dialogs/Dialog/DialogItem.tsx","components/Dialogs/Message/MessageItem.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","redux/users-reducer.tsx","components/Users/UsersContainer.tsx","components/Users/Users.tsx","App.tsx","redux/redux-store.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","Header","className","s","header","src","alt","NavBar","props","nav","item","to","activeClassName","active","settings","ProfileInfo","initialState","changeTextNewPost","posts","name","time","avatar","message","like","Posts","post","postHeader","postHeaderName","postHeaderTime","postInner","postInnerText","MyPostsContainer","connect","state","profilePage","dispatch","addPost","type","updateNewPostText","text","newText","useState","error","setError","postElement","map","p","myPosts","value","onChange","e","currentTarget","placeholder","onClick","trim","errorMessage","Profile","News","Music","Setting","textAddMessage","dialog","id","DialogItem","path","MessageItem","messageItem","DialogsContainer","dialogs","dialogsPage","addTextMessage","valueTextMessage","dialogElement","messageElement","dialogItem","users","status","v1","followed","UsersContainer","usersPage","follow","usersID","FollowAC","unFollow","UnFollowAC","u","key","main","App","render","reducers","combineReducers","action","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.5d1ce02d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3FoeP\",\"dialogItem\":\"Dialogs_dialogItem__3tyjt\",\"active\":\"Dialogs_active__2clQq\",\"message\":\"Dialogs_message__3dR5D\",\"messageItem\":\"Dialogs_messageItem__2t7-l\",\"addPost\":\"Dialogs_addPost__3r6f1\",\"errorMessage\":\"Dialogs_errorMessage__HVgs-\",\"error\":\"Dialogs_error__2H5bx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Posts_post__3ANvF\",\"postHeader\":\"Posts_postHeader__iBsHV\",\"postInner\":\"Posts_postInner__3M8c3\",\"postInnerText\":\"Posts_postInnerText__1ntUH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__3ElgO\",\"errorMessage\":\"MyPosts_errorMessage__1D8KJ\",\"error\":\"MyPosts_error__TFtll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2s73l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile\":\"Profile_Profile__3Z-zi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ProfileInfo\":\"ProfileInfo_ProfileInfo__3w-RO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Users_main__2sjfs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2gYb2\",\"active\":\"NavBar_active__2Jz7P\",\"item\":\"NavBar_item__21Cku\",\"settings\":\"NavBar_settings__3mj7s\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Profile is cached for offline use.\" message.\n              console.log('Profile is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport s from \"./Header.module.scss\";\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header className={s.header}><img\r\n            src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcR7zCD-dHiaNWCvKp-sGnzT7cA7MJb7jo0QOw&usqp=CAU\"\r\n            alt=\"\"/>\r\n        </header>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./NavBar.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport const NavBar = (props: any) => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\r\n            </div>\r\n            <div className={`${s.item} ${s.settings}`}>\r\n                <NavLink to=\"settings\" activeClassName={s.active}>Settings</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.scss\";\r\n\r\n\r\ntype ProfileInfo = {\r\n\r\n}\r\n\r\nexport const ProfileInfo = (props:ProfileInfo) => {\r\n    return (\r\n        <div className={s.ProfileInfo}>\r\n            <div>\r\n                ava\r\n            </div>\r\n            <div>\r\n                description\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {PostType} from \"./types\"\r\n\r\nexport type ActionType = TextAddPostACType | AddPostACType\r\n\r\n\r\ntype InitialStateType = {\r\n    changeTextNewPost: string\r\n    posts: Array<PostType>\r\n}\r\n\r\nlet initialState = {\r\n    changeTextNewPost: \"\",\r\n    posts: [\r\n        {\r\n            name: \"Dart\",\r\n            time: \"10:23\",\r\n            avatar: \"https://html5css.ru/w3css/img_avatar3.png\",\r\n            message: \"bye\",\r\n            like: 25\r\n        }\r\n    ] as Array<PostType>\r\n}\r\n\r\nexport type TextAddPostACType = {\r\n    type: \"TEXT-ADD-POST\"\r\n    newText: string\r\n}\r\n\r\nexport const textAddPostAC = (newText: string): TextAddPostACType => {\r\n    return {\r\n        type: \"TEXT-ADD-POST\",\r\n        newText: newText\r\n    } as const\r\n}\r\nexport type AddPostACType = {\r\n    type: \"ADD-POST\"\r\n}\r\n\r\nexport const addPostAC = (): AddPostACType => ({type: \"ADD-POST\"} as const)\r\n\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, {\r\n                    name: \"Dart\",\r\n                    message: state.changeTextNewPost,\r\n                    time: \"11:00\",\r\n                    avatar: \"https://html5css.ru/w3css/img_avatar3.png\",\r\n                    like: 0\r\n                }],\r\n                changeTextNewPost: \"\"\r\n            }\r\n        case \"TEXT-ADD-POST\":\r\n            return {\r\n                ...state,\r\n                changeTextNewPost: action.newText\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from \"react\";\r\nimport s from \"./Posts.module.scss\";\r\nimport { PostType } from \"../../../../redux/store\";\r\n\r\n\r\nexport const Posts = (props: PostType) => {\r\n    return (\r\n        <div className={s.post}>\r\n            <header className={s.postHeader}>\r\n                <div className={s.postHeaderName}>\r\n                    {props.name}\r\n                </div>\r\n                <div className={s.postHeaderTime}>\r\n                    {props.time}\r\n                </div>\r\n            </header>\r\n            <div className={s.postInner}>\r\n                <div>\r\n                <img src={props.avatar} alt=\"\"/>\r\n                </div>\r\n                <div className={s.postInnerText}>\r\n                    {props.message}\r\n                </div>\r\n            </div>\r\n\r\n            <div className={s.like}>{props.like} </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}","import {addPostAC, textAddPostAC} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {ActionType, RootStateType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\n// type MyPostsContainerPropsType = {\r\n//     message: string\r\n//     posts: Array<PostType>\r\n//     dispatch: (action: ActionType) => void\r\n// }\r\n//\r\n//\r\n// export const MyPostsContainer = (props: MyPostsContainerPropsType) => {\r\n//\r\n//     let [error, setError] = useState<string | null>(null)\r\n//     const addPost = () => {\r\n//         if (props.message.trim()) {\r\n//             props.dispatch(addPostAC())\r\n//         } else {\r\n//             setError(\"Необходимно ввести текст\")\r\n//         }\r\n//\r\n//     }\r\n//     const textAddPost = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n//         let text = e.currentTarget.value\r\n//         props.dispatch(textAddPostAC(text))\r\n//     }\r\n//\r\n//\r\n//     return (<MyPosts\r\n//             addPost={addPost}\r\n//             posts={props.posts}\r\n//             message={props.message}\r\n//             updateNewPostText={textAddPost}\r\n//         />\r\n//     )\r\n// }\r\n\r\n\r\nlet mapSateToProps = (state: RootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        message: state.profilePage.changeTextNewPost\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:(action: ActionType) => void) => {\r\n    return {\r\n        addPost: () => dispatch(addPostAC()),\r\n        updateNewPostText: (text:string) => {dispatch(textAddPostAC(text))}\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapSateToProps, mapDispatchToProps)(MyPosts);","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./MyPosts.module.scss\";\r\nimport {Posts} from \"./Post/Posts\";\r\nimport {PostType} from \"../../../redux/store\";\r\n\r\n\r\ntype MyPostsPropsType = {\r\n    message: string\r\n    addPost: () => void\r\n    posts: Array<PostType>\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\n// let addPostActionCreator = () => {\r\n//     return {\r\n//         type: \"TEXT-ADD-POST\",\r\n//         newText: text\r\n//     }\r\n// }\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n    const addPost = () => {\r\n        debugger\r\n        if (props.message.trim()) {\r\n            props.addPost()\r\n        } else {\r\n            setError(\"Необходимно ввести текст\")\r\n        }\r\n    }\r\n    const updateNewPostText = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value)\r\n    }\r\n\r\n    let postElement = props.posts.map(p => <Posts\r\n        name={p.name}\r\n        time={p.time}\r\n        avatar={p.avatar}\r\n        message={p.message}\r\n        like={p.like}/>)\r\n\r\n    return (<div className={s.myPosts}>\r\n            <h3> my posts</h3>\r\n            <div>\r\n                <div>\r\n                    <textarea\r\n                        className={error ? s.error : \"\"}\r\n                        value={props.message}\r\n                        onChange={updateNewPostText}\r\n                        placeholder={\"AddPost\"}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <button onClick={addPost}>add post\r\n                    </button>\r\n                    {error && <div className={s.errorMessage}>{error}</div>}\r\n                </div>\r\n            </div>\r\n            {postElement}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport s from \"./Profile.module.scss\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport { MyPostsContainer } from \"./MyPosts/MyPostContainer\";\r\n\r\n\r\ntype DialogsPropsType = {\r\n\r\n}\r\n\r\n\r\nexport const Profile = (props: DialogsPropsType) => {\r\n    return (\r\n        <div className={s.Profile}>\r\n            <img src=\"https://www.gettyimages.pt/gi-resources/images/Homepage/Hero/PT/PT_hero_42_153645159.jpg\"\r\n                 alt=\"\"/>\r\n            <ProfileInfo/>\r\n            <MyPostsContainer\r\n                // message={props.profilePage.changeTextNewPost}\r\n                // posts={props.profilePage.posts}\r\n                // dispatch={props.dispatch}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport const Setting = () => {\r\n    return (\r\n        <div>Settings</div>\r\n    )\r\n}","import {DialogsType, MessagesType} from \"./types\";\r\n\r\nexport type ActionType = AddMessageACType | TextAddMessageACType\r\n\r\n\r\ntype InitialStateType = {\r\n    textAddMessage: string,\r\n    dialog: Array<DialogsType>\r\n    message: Array<MessagesType>\r\n}\r\n\r\n\r\nlet initialState = {\r\n    textAddMessage: \"\",\r\n    dialog: [\r\n        {name: \"Den\", id: 1},\r\n        {name: \"SmiT\", id: 2},\r\n        {name: \"Braun\", id: 3}\r\n    ] as Array<DialogsType>,\r\n\r\n    message: [\r\n        {message: \"Hi\", id: 1},\r\n        {message: \"How are you?\", id: 2},\r\n        {message: \"Yo\", id: 3}\r\n    ] as Array<MessagesType>\r\n}\r\n\r\nexport type AddMessageACType = {\r\n    type: \"ADD_MESSAGE\"\r\n}\r\n\r\n\r\nexport const AddMessageAC = (): AddMessageACType => ({type: \"ADD_MESSAGE\"})\r\n\r\nexport type TextAddMessageACType = {\r\n    type: \"TEXT-ADD-MESSAGE\"\r\n    newText: string\r\n}\r\n\r\nexport const TextAddMessageAC = (newText: string): TextAddMessageACType => {\r\n    return {\r\n        type: \"TEXT-ADD-MESSAGE\",\r\n        newText: newText\r\n    }\r\n}\r\n\r\n\r\nexport const dialogsReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n\r\n\r\n    switch(action.type) {\r\n        case \"ADD_MESSAGE\":\r\n            return {...state,\r\n            message: [...state.message, {\r\n                message: state.textAddMessage\r\n                , id: 4\r\n            }],\r\n                textAddMessage:\"\"\r\n            }\r\n\r\n        case \"TEXT-ADD-MESSAGE\":\r\n            return {...state,\r\n            textAddMessage: action.newText\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.scss\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogType = {\r\n    name:string\r\n    id:number\r\n}\r\n\r\nexport const DialogItem = (props: DialogType) => {\r\n\r\n    let path = `/dialogs/${props.id}`\r\n    let name = props.name\r\n\r\n    return (<div>\r\n            <NavLink activeClassName={s.active} to={path}>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\r\nimport s from \"./../Dialogs.module.scss\";\r\n\r\ntype MessageType = {\r\n    message:string\r\n}\r\n\r\nexport const MessageItem = (props: MessageType) => {\r\n    return (\r\n        <div className={s.messageItem} >\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n","import {ActionType, RootStateType} from \"../../redux/store\";\r\nimport {AddMessageAC, TextAddMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nlet mapSateToProps = (state: RootStateType) => {\r\n    return {\r\n        dialogs: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch:(action: ActionType) => void) => {\r\n    return {\r\n        addPost: () => dispatch(AddMessageAC()),\r\n        addTextMessage: (text:string) => {dispatch(TextAddMessageAC(text))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const DialogsContainer = connect(mapSateToProps, mapDispatchToProps)(Dialogs);","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from \"./Dialogs.module.scss\";\r\nimport {DialogItem} from \"./Dialog/DialogItem\";\r\nimport {MessageItem} from \"./Message/MessageItem\";\r\nimport {DialogsPageType} from \"../../redux/store\";\r\n\r\ntype DialogsType = {\r\n    dialogs: DialogsPageType\r\n    addPost: () => void\r\n    addTextMessage: (text: string) => void\r\n}\r\n\r\nexport const Dialogs = (props: DialogsType) => {\r\n\r\n    let [error, setError] = useState<string | null>(null)\r\n    let addPost = () => {\r\n        if (props.dialogs.textAddMessage.trim()) {\r\n            props.addPost()\r\n        } else {\r\n            setError(\"Необходимно ввести текст\")\r\n        }\r\n    }\r\n    const valueTextMessage = props.dialogs.textAddMessage\r\n    const changeValueTextMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.addTextMessage(e.currentTarget.value)\r\n    }\r\n\r\n    let dialogElement = props.dialogs.dialog.map(dialog => <DialogItem name={dialog.name} id={dialog.id}/>)\r\n    let messageElement = props.dialogs.message.map(message => <MessageItem message={message.message}/>)\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogItem}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.message}>\r\n                {messageElement}\r\n                <div className={s.addPost}>\r\n                    <textarea\r\n                        className={error ? s.error : \"\"}\r\n                        value={valueTextMessage}\r\n                        onChange={changeValueTextMessage}\r\n                    > </textarea>\r\n                    <button onClick={addPost}>add post</button>\r\n                    {error && <div className={s.errorMessage}>{error}</div>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {v1} from \"uuid\";\r\n\r\nexport type ActionType = FollowACType | UnFollowACType\r\n\r\n\r\ntype InitialStateType = {\r\n    users: Array<UsersType>\r\n}\r\n\r\ntype UsersType = {\r\n    name: string\r\n    status: string\r\n    avatar: string\r\n    id: string\r\n    followed: boolean\r\n}\r\n\r\nlet initialState = {\r\n    users: [\r\n        {name: \"Dmitry\", status: \"ready\", avatar: \"https://w7.pngwing.com/pngs/117/752/png-transparent-computer-icons-user-icon-design-numerous-miscellaneous-logo-computer-wallpaper.png\", id: v1(), followed: false},\r\n        {name: \"Alex\", status: \"ready\", avatar: \"https://w7.pngwing.com/pngs/117/752/png-transparent-computer-icons-user-icon-design-numerous-miscellaneous-logo-computer-wallpaper.png\", id: v1(), followed: true},\r\n        {name: \"Sveta\", status: \"ready\", avatar: \"https://w7.pngwing.com/pngs/117/752/png-transparent-computer-icons-user-icon-design-numerous-miscellaneous-logo-computer-wallpaper.png\", id: v1(), followed: false},\r\n        {name: \"Ignat\", status: \"ready\", avatar: \"https://w7.pngwing.com/pngs/117/752/png-transparent-computer-icons-user-icon-design-numerous-miscellaneous-logo-computer-wallpaper.png\", id: v1(), followed: true}\r\n    ]\r\n}\r\n\r\nexport type FollowACType = {\r\n    type: \"FOLLOW\"\r\n    usersID: string\r\n}\r\n\r\nexport type UnFollowACType = {\r\n    type: \"UNFOLLOW\"\r\n    usersID: string\r\n}\r\n\r\n\r\nexport const FollowAC = (usersID: string): FollowACType => {\r\n    return {\r\n        type: \"FOLLOW\",\r\n        usersID: usersID\r\n    }\r\n}\r\n\r\nexport const UnFollowAC = (usersID: string): UnFollowACType => {\r\n    return {\r\n        type: \"UNFOLLOW\",\r\n        usersID: usersID\r\n    }\r\n}\r\n\r\nexport const usersReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.usersID) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.usersID) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {connect} from \"react-redux\";\r\nimport {Users} from \"./Users\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {ActionType, FollowAC, UnFollowAC} from \"../../redux/users-reducer\";\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return{\r\n        users: state.usersPage\r\n    }\r\n}\r\n\r\n\r\nlet mapDispatchToProps = (dispatch: (action: ActionType)=>void) => {\r\n    return  {\r\n        follow: (usersID: string) => {dispatch(FollowAC(usersID))},\r\n        unFollow:(usersID: string) => {dispatch(UnFollowAC(usersID))}\r\n    }\r\n}\r\nexport const UsersContainer = connect(mapStateToProps,mapDispatchToProps)(Users)","import React from \"react\";\r\nimport {UsersPegaType} from \"../../redux/store\";\r\nimport s from \"./Users.module.scss\"\r\n\r\ntype UsersPropsType = {\r\n    users: UsersPegaType\r\n    follow: (userID:string) => void\r\n    unFollow: (userID:string) => void\r\n}\r\n\r\n\r\nexport const Users = (props: UsersPropsType) => {\r\n    return (\r\n        <div >\r\n            {props.users.users.map(u =>\r\n            <div key={u.id} className={s.main}>\r\n                <img src={u.avatar} alt=\"\"/>\r\n                <div>{u.name}</div>\r\n                <div>{u.status}</div>\r\n                { u.followed\r\n                    ? <button onClick={() => {props.unFollow(u.id)}} >UnFollow</button>\r\n                    : <button onClick={() => {props.follow(u.id)}} >Follow</button>}\r\n\r\n            </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.scss';\r\nimport {Header} from \"./components/Header/Header\";\r\nimport {NavBar} from \"./components/NavBar/NavBar\";\r\nimport {Profile} from \"./components/Profile/Profile\";\r\nimport {Route} from 'react-router-dom';\r\nimport {News} from \"./components/News/News\";\r\nimport {Music} from \"./components/Music/Music\";\r\nimport {Setting} from \"./components/Setting/Setting\";\r\nimport {DialogsContainer} from \"./components/Dialogs/DialogsContainer\";\r\nimport {UsersContainer} from \"./components/Users/UsersContainer\";\r\n\r\ntype AppPropsType = {}\r\n\r\nconst App = (props: AppPropsType) => {\r\n\r\n    return (\r\n        <div className=\"app-wrapper\">\r\n            <Header/>\r\n            <div className={\"body\"}>\r\n                <NavBar/>\r\n                <div className={\"app-wrapper-content\"}>\r\n                    <Route path={\"/profile\"}\r\n                           render={() => <Profile/>}/>\r\n                    <Route path={\"/dialogs\"}\r\n                           render={() => <DialogsContainer/>}/>\r\n                    <Route path={\"/news\"}\r\n                           render={() => <News/>}/>\r\n                    <Route path={\"/music\"}\r\n                           render={() => <Music/>}/>\r\n                    <Route path={\"/settings\"}\r\n                           render={() => <Setting/>}/>\r\n                    <Route path={\"/users\"}\r\n                           render={() => <UsersContainer/>}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {combineReducers, createStore} from \"redux\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\n\r\n\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer\r\n})\r\n\r\n\r\ntype ReducersType = typeof  reducers\r\nexport type AppStateType = ReturnType<ReducersType>\r\n\r\nexport let store = createStore(reducers)","import './index.scss';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\nimport {store} from \"./redux/redux-store\";\r\nimport {Provider} from \"react-redux\"\r\n\r\nReactDOM.render(<BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>,\r\n\r\n    document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}